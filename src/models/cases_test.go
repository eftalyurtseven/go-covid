// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCases(t *testing.T) {
	t.Parallel()

	query := Cases()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCasesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Cases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCasesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Cases().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Cases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCasesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CaseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Cases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCasesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CaseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Case exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CaseExists to return true, but got false.")
	}
}

func testCasesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	caseFound, err := FindCase(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if caseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCasesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Cases().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCasesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Cases().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCasesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	caseOne := &Case{}
	caseTwo := &Case{}
	if err = randomize.Struct(seed, caseOne, caseDBTypes, false, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}
	if err = randomize.Struct(seed, caseTwo, caseDBTypes, false, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = caseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = caseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Cases().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCasesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	caseOne := &Case{}
	caseTwo := &Case{}
	if err = randomize.Struct(seed, caseOne, caseDBTypes, false, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}
	if err = randomize.Struct(seed, caseTwo, caseDBTypes, false, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = caseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = caseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func caseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Case) error {
	*o = Case{}
	return nil
}

func caseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Case) error {
	*o = Case{}
	return nil
}

func caseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Case) error {
	*o = Case{}
	return nil
}

func caseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Case) error {
	*o = Case{}
	return nil
}

func caseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Case) error {
	*o = Case{}
	return nil
}

func caseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Case) error {
	*o = Case{}
	return nil
}

func caseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Case) error {
	*o = Case{}
	return nil
}

func caseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Case) error {
	*o = Case{}
	return nil
}

func caseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Case) error {
	*o = Case{}
	return nil
}

func testCasesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Case{}
	o := &Case{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, caseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Case object: %s", err)
	}

	AddCaseHook(boil.BeforeInsertHook, caseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	caseBeforeInsertHooks = []CaseHook{}

	AddCaseHook(boil.AfterInsertHook, caseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	caseAfterInsertHooks = []CaseHook{}

	AddCaseHook(boil.AfterSelectHook, caseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	caseAfterSelectHooks = []CaseHook{}

	AddCaseHook(boil.BeforeUpdateHook, caseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	caseBeforeUpdateHooks = []CaseHook{}

	AddCaseHook(boil.AfterUpdateHook, caseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	caseAfterUpdateHooks = []CaseHook{}

	AddCaseHook(boil.BeforeDeleteHook, caseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	caseBeforeDeleteHooks = []CaseHook{}

	AddCaseHook(boil.AfterDeleteHook, caseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	caseAfterDeleteHooks = []CaseHook{}

	AddCaseHook(boil.BeforeUpsertHook, caseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	caseBeforeUpsertHooks = []CaseHook{}

	AddCaseHook(boil.AfterUpsertHook, caseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	caseAfterUpsertHooks = []CaseHook{}
}

func testCasesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCasesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(caseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Cases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCasesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCasesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CaseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCasesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Cases().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	caseDBTypes = map[string]string{`ID`: `int`, `DateRep`: `varchar`, `Day`: `int`, `Month`: `int`, `Year`: `int`, `Cases`: `int`, `Deaths`: `int`, `CountriesAndTerritories`: `varchar`, `GeoID`: `varchar`, `CountryterritoryCode`: `varchar`, `PopData2018`: `int`, `ContinentExp`: `varchar`, `UpdatedAt`: `timestamp`, `CreatedAt`: `timestamp`}
	_           = bytes.MinRead
)

func testCasesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(casePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(caseAllColumns) == len(casePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, caseDBTypes, true, casePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCasesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(caseAllColumns) == len(casePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Case{}
	if err = randomize.Struct(seed, o, caseDBTypes, true, caseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, caseDBTypes, true, casePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(caseAllColumns, casePrimaryKeyColumns) {
		fields = caseAllColumns
	} else {
		fields = strmangle.SetComplement(
			caseAllColumns,
			casePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CaseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCasesUpsert(t *testing.T) {
	t.Parallel()

	if len(caseAllColumns) == len(casePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCaseUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Case{}
	if err = randomize.Struct(seed, &o, caseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Case: %s", err)
	}

	count, err := Cases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, caseDBTypes, false, casePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Case struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Case: %s", err)
	}

	count, err = Cases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
